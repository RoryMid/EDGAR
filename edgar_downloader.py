{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import os\n",
    "from bs4 import BeautifulSoup\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "import time\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions\n",
    "from selenium.common.exceptions import TimeoutException\n",
    "from selenium.webdriver.common.by import By\n",
    "\n",
    "headers = {\"User-Agent\": r'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def write_page(url, file_path): \n",
    "    '''\n",
    "    Opens url and writes html to the file path\n",
    "    '''\n",
    "    with open(file_path, 'w',  encoding='utf-8') as file:\n",
    "        response = requests.get(url, headers = headers)\n",
    "        soup = BeautifulSoup(response.text, 'lxml')\n",
    "        file.write(str(soup))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def selenium_activate(key):\n",
    "    '''\n",
    "    Selenium gets to a page with a table of 10-k filings. Saves the (cleaned) links with their date. \n",
    "    Returns dictionary or URL and Date.\n",
    "    '''\n",
    "    driver = webdriver.Chrome()\n",
    "    print('loading up website')\n",
    "    driver.get('https://www.sec.gov/edgar/searchedgar/companysearch.html')\n",
    "    xpath_search = r'/html/body/div[2]/div/div/div/section/div[3]/div[2]/div[2]/div[3]/div/form/input[1]'\n",
    "    driver.find_element_by_xpath(xpath_search).click()\n",
    "\n",
    "    searchinput_path = r'/html/body/div[2]/div/div/div/section/div[3]/div[2]/div[2]/div[3]/div/form/input[1]'\n",
    "    driver.find_element_by_xpath(searchinput_path).send_keys(key, Keys.ENTER)\n",
    "\n",
    "    w = WebDriverWait(driver,30)\n",
    "    w.until(expected_conditions.element_to_be_clickable((By.XPATH, r'/html/body/main/div[4]/div[2]/div[3]/h5')))\n",
    "    button1 = driver.find_element_by_xpath(r'/html/body/main/div[4]/div[2]/div[3]/h5')\n",
    "    button1.click()\n",
    "    \n",
    "    w.until(expected_conditions.element_to_be_clickable((By.XPATH, r'/html/body/main/div[4]/div[2]/div[3]/div/button[1]')))\n",
    "    button2 = driver.find_element_by_xpath(r'/html/body/main/div[4]/div[2]/div[3]/div/button[1]')\n",
    "    button2.click()\n",
    "\n",
    "    w.until(expected_conditions.element_to_be_clickable((By.XPATH, r'/html/body/main/div[5]/div/div[1]/div[1]/div/input[2]')))\n",
    "    xpath_search = r'/html/body/main/div[5]/div/div[1]/div[1]/div/input[2]'\n",
    "    driver.find_element_by_xpath(xpath_search).click()\n",
    "\n",
    "    searchinput_path = r'/html/body/main/div[5]/div/div[1]/div[1]/div/input[2]'\n",
    "    driver.find_element_by_xpath(searchinput_path).send_keys('10-K', Keys.ENTER)\n",
    "    \n",
    "    print('getting urls')\n",
    "    time.sleep(2)\n",
    "\n",
    "    url = {}\n",
    "\n",
    "    for row in driver.find_elements_by_css_selector(\"tr.odd\"):\n",
    "        for cell in row.find_elements_by_class_name(\"document-link\"):\n",
    "            x = cell.get_attribute(\"href\")\n",
    "            import re\n",
    "            x = re.sub(r\"/ix\\?doc=\", '', x)\n",
    "            time.sleep(1)\n",
    "        y = row.find_elements_by_tag_name(\"td\")[3].text\n",
    "        time.sleep(1)\n",
    "\n",
    "        url[x] = y\n",
    "        \n",
    "\n",
    "    for row in driver.find_elements_by_css_selector(\"tr.even\"):\n",
    "        for cell in row.find_elements_by_class_name(\"document-link\"):\n",
    "            x = cell.get_attribute(\"href\")\n",
    "            import re\n",
    "            x = re.sub(r\"/ix\\?doc=\", '', x)\n",
    "            time.sleep(1)\n",
    "        y = row.find_elements_by_tag_name(\"td\")[3].text\n",
    "        time.sleep(1)\n",
    "        url[x] = y\n",
    "        \n",
    "    print('urls gathered, chrome closing')\n",
    "\n",
    "    driver.quit()\n",
    "    return url"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def download_files_10k(ticker,dest_folder):\n",
    "    '''\n",
    "    Changes directory to destination folder. Calls the selenium to get a link, date dictionary. Uses these to write the html to the file name.\n",
    "    '''\n",
    "    os.chdir(dest_folder)\n",
    "    for tick in ticker:\n",
    "        urls= selenium_activate(tick)\n",
    "        print('Saving html')\n",
    "        for key,value in urls.items(): \n",
    "            write_page(key, f'{tick}_10-K_{value}.html')\n",
    "            time.sleep(1)\n",
    "    print('complete')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
